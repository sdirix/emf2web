/*******************************************************************************
 * Copyright (c) 2011-2015 EclipseSource Muenchen GmbH and others.
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 * Stefan Dirix - initial API and implementation
 ******************************************************************************/
package org.eclipse.emf.ecp.emf2web.generator.scala

import java.util.List
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EStructuralFeature
import org.eclipse.emf.ecp.view.spi.model.VContainedElement
import org.eclipse.emf.ecp.view.spi.model.VContainer
import org.eclipse.emf.ecp.view.spi.model.VControl
import org.eclipse.emf.ecp.view.spi.model.VElement
import org.eclipse.emf.ecp.view.spi.model.VView
import org.eclipse.emf.ecp.emf2web.export.NameHelper

/**
 * @author Stefan Dirix
 *
 */
class FormsScalaGenerator{
	
	NameHelper nameHelper
	
	new(NameHelper nameHelper) {
		this.nameHelper = nameHelper;
	}
	
	/**
	 * Generates the Scala Forms object for the given {@link VView}. 
	 * 
	 * @param view
	 * 		The {@link VVIew} for which a string representation of a Scala Forms object is to be determined.
	 * 
	 * @param schemaObjectName
	 * 		The name of the object generated by {@link EcoreQBGenerator}. The name is used to establish a link between the view model and the object schema.
	 * 
	 * @return
	 * 		The string representing the Scala Forms object.
	 */
	def String generate(VView view, String schemaObjectName) {
		'''
		ViewModel(
			«schemaObjectName»,
			«buildViewModelElement(view)»
		)
		'''
	}

	def protected String buildViewModelElement(VElement vElement) {
		switch vElement {
			VView: buildChildren(vElement.children)
			VContainer: buildContainer(vElement)
			VControl: buildControl(vElement)
		}
	}
	
	def protected String buildContainer(VContainer container) {
		'''
		«getType(container)»(
			«buildChildren(container.children)»
		)
		'''
	}
	
	def protected String buildControl(VControl control){
		val EStructuralFeature feature = control.domainModelReference.getEStructuralFeatureIterator.next
		val EClass eClass = feature.getEContainingClass
		val String name = nameHelper.getDisplayName(eClass, feature)
		buildControl(name, feature.name)
	}

	def protected String buildControl(String name, String path) {
		'''
		ViewControl("«name»", ViewPath("«path»"))
		'''
	}
	
	def String getType(VElement vElement) {
		vElement.eClass.name.substring(1)
	}

	def String buildChildren(List<VContainedElement> children) {
		'''
		«FOR element : children SEPARATOR ','»
		  «buildViewModelElement(element)»
		«ENDFOR»
		'''
	}
}